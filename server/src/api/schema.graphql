type Section {
    prefix: Boolean!
    suffix: Boolean!
    start: Int!
    end: Int!
}

type Hint {
    id: Int!
    key: String!
    areas: [[Section!]!]!
    hints: [String!]!
}

type Conlang {
    id: Int!
    name: String!

    prefix: String!
    suffix: String!
    separator: String!
}

input PhraseInput {
    fromConlang: Boolean!
    sentence: String!
    area: [SectionInput!]!
}

input SectionInput {
    prefix: Boolean!
    suffix: Boolean!
    start: Int!
    end: Int!
}

type Query {
    hint(conlang: Int!, phrase: PhraseInput!): [Hint!]!
    conlang(id: Int!): Conlang
}

type Mutation {
    addNewHint(conlang: Int!, phrase: PhraseInput!, hint: String!): Hint

    addHint(hint: Int!, string: String!): [String!]
    setHint(hint: Int!, index: Int!, string: String!): [String!]
    removeHint(hint: Int!, index: Int!): [String!]

    removeEntireHint(hint: Int!): Boolean!
}
